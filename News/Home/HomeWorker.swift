//
//  HomeWorker.swift
//  News
//
//  Created by Pasika Pongsawaluk on 13/3/2568 BE.
//  Copyright (c) 2568 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct NewsResponse: Decodable {
    let status: String
    let totalResults: Int
    let articles: [News]
}

struct News: Decodable {
    let source: NewsSource
    let author: String?
    let title: String?
    let description: String?
    let url: String?
    let urlToImage: String?
    let publishedAt: String?
    let content: String?
}

struct NewsSource: Decodable {
    let id: String?
    let name: String?
}

extension URLSession {
    func fetchData(at url: URL, completion: @escaping (Result<NewsResponse, Error>) -> Void) {
        self.dataTask(with: url) { (data, response, error) in
            if let error = error {
                print("Error occurred: \(error.localizedDescription)")
                completion(.failure(error))
            }
            
            if let data = data {
                do {
                    let response = try JSONDecoder().decode(NewsResponse.self, from: data)
                    completion(.success(response))
                } catch let decoderError {
                    print("JSON decoding error: \(decoderError)")
                    completion(.failure(decoderError))
                }
            }
            else {
                print("No data received.")
            }
        }.resume()
    }
}

class HomeWorker
{
    func fetchData(completion: @escaping (NewsResponse) -> Void) {
        let url = URL(string: "https://newsapi.org/v2/top-headlines?country=us&apiKey=b873d187ca164e6ba76b22a9c0856909")!
        URLSession.shared.fetchData(at: url) { result in
            switch result {
            case .success(let response):
                print("ดึงข้อมูลสำเร็จ api")
                completion(response)
            case .failure(let error):
                break
            }
        }
    }
}
